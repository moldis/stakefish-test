// Code generated by mockery v2.23.2. DO NOT EDIT.

package client

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockDNSResolver is an autogenerated mock type for the DNSResolver type
type MockDNSResolver struct {
	mock.Mock
}

// ResolveDomainToIPV4 provides a mock function with given fields: ctx, host
func (_m *MockDNSResolver) ResolveDomainToIPV4(ctx context.Context, host string) ([]net.IP, error) {
	ret := _m.Called(ctx, host)

	var r0 []net.IP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]net.IP, error)); ok {
		return rf(ctx, host)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []net.IP); ok {
		r0 = rf(ctx, host)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockDNSResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDNSResolver creates a new instance of MockDNSResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDNSResolver(t mockConstructorTestingTNewMockDNSResolver) *MockDNSResolver {
	mock := &MockDNSResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
